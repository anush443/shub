{"version":3,"sources":["component/App.js"],"names":["i","web3","contract","Contract","constant","inputs","internalType","name","type","outputs","payable","stateMutability","anonymous","indexed","domainType","metaTransactionType","domainData","version","verifyingContract","useStyles","makeStyles","theme","root","marginLeft","spacing","biconomy","display","justifyContent","alignItems","width","link","Heading","styled","h1","Division","div","Division2","FlexDiv","App","classes","useState","setQuote","setOwner","selectedAddress","setSelectedAddress","metaTxEnabled","setTransactionHash","useEffect","window","ethereum","isMetaMask","provider","enable","networkVersion","chainId","Biconomy","apiKey","debug","Web3","onEvent","READY","eth","getQuoteFromNetwork","on","accounts","ERROR","error","message","showErrorMessage","init","onSubmit","event","userAddress","methods","getNonce","call","nonce","functionSignature","transferer20","encodeABI","parseInt","from","dataToSign","JSON","stringify","types","EIP712Domain","MetaTransaction","domain","primaryType","currentProvider","send","jsonrpc","id","method","params","response","result","getSignatureParameters","r","s","v","sendSignedTransaction","placebet","hash","showInfoMessage","once","confirmationNumber","receipt","transactionHash","showSuccessMessage","signature","utils","isHexStrict","Error","concat","slice","hexToNumber","includes","balanceOf","then","undefined","currentQuote","currentOwner","NotificationManager","success","info","functionData","executeMetaTransaction","estimateGas","gasLimit","getGasPrice","gasPrice","console","log","className","mt","p","fullWidth","variant","placeholder","align","color","size","onClick"],"mappings":"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","file":"static/js/17.6d93a7fa.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Web3 from \"web3\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styled from \"styled-components\";\nimport { Box, TextField } from \"@material-ui/core\";\n\nconst Contract = {\n  address: \"0x94c0104e7a296efde81cb69e2a5295a675e594b8\",\n\n  abi: [\n    {\n      constant: false,\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"userAddress\",\n          type: \"address\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"functionSignature\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"sigR\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"sigS\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"uint8\",\n          name: \"sigV\",\n          type: \"uint8\",\n        },\n      ],\n      name: \"executeMetaTransaction\",\n      outputs: [\n        {\n          internalType: \"bytes\",\n          name: \"\",\n          type: \"bytes\",\n        },\n      ],\n      payable: true,\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    {\n      constant: false,\n      inputs: [\n        {\n          internalType: \"string\",\n          name: \"newQuote\",\n          type: \"string\",\n        },\n      ],\n      name: \"setQuote\",\n      outputs: [],\n      payable: false,\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      constant: false,\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"a\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"transferer20\",\n      outputs: [],\n      payable: false,\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"_token\",\n          type: \"address\",\n        },\n      ],\n      payable: false,\n      stateMutability: \"nonpayable\",\n      type: \"constructor\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"userAddress\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"address payable\",\n          name: \"relayerAddress\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes\",\n          name: \"functionSignature\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"MetaTransactionExecuted\",\n      type: \"event\",\n    },\n    {\n      constant: false,\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"userAddress\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"transfertouser\",\n      outputs: [],\n      payable: false,\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      constant: true,\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"user\",\n          type: \"address\",\n        },\n      ],\n      name: \"getNonce\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"nonce\",\n          type: \"uint256\",\n        },\n      ],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      constant: true,\n      inputs: [],\n      name: \"getQuote\",\n      outputs: [\n        {\n          internalType: \"string\",\n          name: \"currentQuote\",\n          type: \"string\",\n        },\n        {\n          internalType: \"address\",\n          name: \"currentOwner\",\n          type: \"address\",\n        },\n      ],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      constant: true,\n      inputs: [],\n      name: \"owner\",\n      outputs: [\n        {\n          internalType: \"address\",\n          name: \"\",\n          type: \"address\",\n        },\n      ],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      constant: true,\n      inputs: [],\n      name: \"quote\",\n      outputs: [\n        {\n          internalType: \"string\",\n          name: \"\",\n          type: \"string\",\n        },\n      ],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n  ],\n};\n\n\nconst domainType = [\n  { name: \"name\", type: \"string\" },\n  { name: \"version\", type: \"string\" },\n  { name: \"chainId\", type: \"uint256\" },\n  { name: \"verifyingContract\", type: \"address\" },\n];\n\nconst metaTransactionType = [\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"from\", type: \"address\" },\n  { name: \"functionSignature\", type: \"bytes\" },\n];\n\nlet domainData = {\n  name: \"TestContract\",\n  version: \"1\",\n  verifyingContract: Contract.address,\n};\n\nlet web3;\nlet contract;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > * + *\": {\n      marginLeft: theme.spacing(2),\n    },\n  },\n  biconomy: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n  link: {\n    marginLeft: \"5px\",\n  },\n}));\nconst Heading = styled.h1`\n  font-family: \"K2D\";\n  font-style: normal;\n  font-weight: 600;\n  font-size: 30px;\n  line-height: 39px;\n  text-transform: uppercase;\n  color: #ffffff;\n`;\nconst Division = styled.div`\n  background: linear-gradient(\n      115.29deg,\n      #f54f4f 15.07%,\n      rgba(182, 17, 107, 0.91) 104.4%\n    ),\n    linear-gradient(105.19deg, #8de6d1 2.66%, #2fb3fc 81.96%),\n    linear-gradient(105.19deg, #8de6d1 2.66%, #2fb3fc 81.96%);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25),\n    -10px -10px 20px rgba(255, 255, 255, 0.25),\n    10px 10px 20px rgba(0, 0, 0, 0.25);\n  border-radius: 0px 0px 40px 40px;\n  padding: 0 52px;\n`;\nconst Division2 = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nconst FlexDiv = styled.div`\n  margin-top: 5 rem;\n`;\n\nfunction App() {\n  const classes = useStyles();\n  const preventDefault = (event) => event.preventDefault();\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [selectedAddress, setSelectedAddress] = useState(\"\");\n  const [metaTxEnabled, setMetaTxEnabled] = useState(true);\n  const [transactionHash, setTransactionHash] = useState(\"\");\n\n  useEffect(() => {\n    async function init() {\n      if (\n        typeof window.ethereum !== \"undefined\" &&\n        window.ethereum.isMetaMask\n      ) {\n        // Ethereum user detected. You can now use the provider.\n        const provider = window[\"ethereum\"];\n        await provider.enable();\n        if (provider.networkVersion == \"80001\") {\n          domainData.chainId = 80001;\n          const biconomy = new Biconomy(provider, {\n            apiKey: \"O3-IjZClP.ce1ab5be-6f1d-4355-a450-f6a553818f12\",\n            debug: true,\n          });\n          web3 = new Web3(biconomy);\n\n          biconomy\n            .onEvent(biconomy.READY, () => {\n              // Initialize your dapp here like getting user accounts etc\n              contract = new web3.eth.Contract(Contract.abi, Contract.address);\n              setSelectedAddress(provider.selectedAddress);\n              getQuoteFromNetwork();\n              provider.on(\"accountsChanged\", function (accounts) {\n                setSelectedAddress(accounts[0]);\n              });\n            })\n            .onEvent(biconomy.ERROR, (error, message) => {\n              // Handle error while initializing mexa\n            });\n        } else {\n          showErrorMessage(\n            \"Please change the network in metamask to Mumbai Testnet\"\n          );\n        }\n      } else {\n        showErrorMessage(\"Metamask not installed\");\n      }\n    }\n    init();\n  }, []);\n\n\n\n  const onSubmit = async (event) => {\n    if (contract) {\n      setTransactionHash(\"\");\n      if (metaTxEnabled) {\n        let userAddress = selectedAddress;\n        let nonce = await contract.methods.getNonce(userAddress).call();\n        let functionSignature = contract.methods\n          .transferer20(\"0x94c0104e7a296efde81cb69e2a5295a675e594b8\", \"1\")\n          .encodeABI();\n\n        let message = {};\n        message.nonce = parseInt(nonce);\n        message.from = userAddress;\n        message.functionSignature = functionSignature;\n\n        const dataToSign = JSON.stringify({\n          types: {\n            EIP712Domain: domainType,\n            MetaTransaction: metaTransactionType,\n          },\n          domain: domainData,\n          primaryType: \"MetaTransaction\",\n          message: message,\n        });\n\n        web3.currentProvider.send(\n          {\n            jsonrpc: \"2.0\",\n            id: 999999999999,\n            method: \"eth_signTypedData_v4\",\n            params: [userAddress, dataToSign],\n          },\n          function (error, response) {\n            if (error || (response && response.error)) {\n              showErrorMessage(\"Could not get user signature\");\n            } else if (response && response.result) {\n              let { r, s, v } = getSignatureParameters(response.result);\n\n              sendSignedTransaction(userAddress, functionSignature, r, s, v);\n            }\n          }\n        );\n      } else {\n        contract.methods\n          .placebet(\"0\", \"2\", \"156\", \"0\", \"moneyline\", \"123\")\n          .send({ from: selectedAddress })\n          .on(\"transactionHash\", function (hash) {\n            showInfoMessage(`Transaction sent to blockchain with hash ${hash}`);\n          })\n          .once(\"confirmation\", function (confirmationNumber, receipt) {\n            setTransactionHash(receipt.transactionHash);\n            showSuccessMessage(\"Transaction confirmed\");\n          });\n      }\n    } else {\n      showErrorMessage(\"Please enter the quote\");\n    }\n  };\n\n  const getSignatureParameters = (signature) => {\n    if (!web3.utils.isHexStrict(signature)) {\n      throw new Error(\n        'Given value \"'.concat(signature, '\" is not a valid hex string.')\n      );\n    }\n    var r = signature.slice(0, 66);\n    var s = \"0x\".concat(signature.slice(66, 130));\n    var v = \"0x\".concat(signature.slice(130, 132));\n    v = web3.utils.hexToNumber(v);\n    if (![27, 28].includes(v)) v += 27;\n    return {\n      r: r,\n      s: s,\n      v: v,\n    };\n  };\n\n  const getQuoteFromNetwork = () => {\n    if (web3 && contract) {\n      contract.methods\n        .balanceOf()\n        .call()\n        .then(function (result) {\n          if (\n            result &&\n            result.currentQuote != undefined &&\n            result.currentOwner != undefined\n          ) {\n            if (result.currentQuote == \"\") {\n              showErrorMessage(\"No quotes set on blockchain yet\");\n            } else {\n              setQuote(result.currentQuote);\n              setOwner(result.currentOwner);\n            }\n          } else {\n            showErrorMessage(\"Not able to get quote information from Network\");\n          }\n        });\n    }\n  };\n\n  const showErrorMessage = (message) => {\n    NotificationManager.error(message, \"Error\", 5000);\n  };\n\n  const showSuccessMessage = (message) => {\n    NotificationManager.success(message, \"Message\", 3000);\n  };\n\n  const showInfoMessage = (message) => {\n    NotificationManager.info(message, \"Info\", 3000);\n  };\n\n  const sendSignedTransaction = async (userAddress, functionData, r, s, v) => {\n    if (web3 && contract) {\n      try {\n        let gasLimit = await contract.methods\n          .executeMetaTransaction(userAddress, functionData, r, s, v)\n          .estimateGas({ from: userAddress });\n        let gasPrice = await web3.eth.getGasPrice();\n\n        let tx = contract.methods\n          .executeMetaTransaction(userAddress, functionData, r, s, v)\n          .send({\n            from: userAddress,\n            gasPrice: gasPrice,\n            gasLimit: gasLimit,\n          });\n\n        tx.on(\"transactionHash\", function (hash) {\n          showInfoMessage(`Transaction sent by relayer with hash ${hash}`);\n        }).once(\"confirmation\", function (confirmationNumber, receipt) {\n          setTransactionHash(receipt.transactionHash);\n          showSuccessMessage(\"Transaction confirmed on chain\");\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <section>\n        <Box className={classes.biconomy} mt={2} p={2}>\n          <Division>\n            <Heading>Deposit your token in DEXWIN ecosystem</Heading>\n          </Division>\n        </Box>\n        <Division2>\n          <FlexDiv>\n            <TextField\n              fullWidth\n              variant=\"outlined\"\n              placeholder=\"Enter the number\"\n              type=\"tel\"\n            />\n          </FlexDiv>\n        </Division2>\n      </section>\n      <section>\n        <Division2>\n          <Box align=\"center\" mt={3}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              fullWidth\n              className=\"gradientButton\"\n              onClick={onSubmit}\n            >\n              Submit\n            </Button>\n          </Box>\n        </Division2>\n      </section>\n      <NotificationContainer />\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}