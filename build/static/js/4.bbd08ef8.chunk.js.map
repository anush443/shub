{"version":3,"sources":["../node_modules/@noble/hashes/utils.js","../node_modules/bs58/index.js","../../src/Layout.ts","../../src/rpc/JrpcClient.ts","../../src/rpc/solanaRpcMiddlewares.ts","../../src/providers/injectedProviders/base/baseInjectedProvider.ts","../../src/providers/injectedProviders/base/providerHandlers.ts","../../src/providers/injectedProviders/injectedProviderProxy.ts","../../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../../src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../../src/providers/injectedProviders/slope/providerHandlers.ts","../../src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../../src/providers/injectedProviders/solflare/providerHandlers.ts","../../src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../../src/providers/injectedProviders/sollet/providerHandlers.ts","../../src/providers/injectedProviders/torus/providerHandlers.ts","../../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../../src/solanaWallet.ts","../../src/classes.ts","../../src/error-constants.ts","../node_modules/@noble/hashes/_assert.js","../node_modules/borsh/lib/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/rpc-websockets/dist/index.browser.js","../node_modules/jayson/lib/client/browser/index.js","../../src/utils.ts","../node_modules/@noble/hashes/_sha2.js","../node_modules/@noble/hashes/_u64.js","../../src/error.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","../../src/structs/coercions.ts","../node_modules/base-x/src/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/jayson/lib/generateRequest.js","../../src/index.ts","../../src/errors.ts","../node_modules/@noble/hashes/sha512.js","../node_modules/@noble/hashes/cryptoBrowser.js","../node_modules/@noble/hashes/sha256.js","../node_modules/@noble/hashes/sha3.js","../node_modules/@noble/hashes/hmac.js","../node_modules/@noble/ed25519/lib/esm/index.js","../node_modules/@noble/secp256k1/lib/esm/index.js","../../src/utils/ed25519.ts","../../src/utils/to-buffer.ts","../../src/utils/borsh-schema.ts","../../src/publickey.ts","../../src/bpf-loader-deprecated.ts","../../src/account.ts","../../src/transaction/expiry-custom-errors.ts","../../src/message/account-keys.ts","../../src/layout.ts","../../src/utils/shortvec-encoding.ts","../../src/utils/assert.ts","../../src/transaction/legacy.ts","../../src/message/compiled-keys.ts","../../src/message/legacy.ts","../../src/transaction/constants.ts","../../src/message/v0.ts","../../src/sysvar.ts","../../src/utils/send-and-confirm-transaction.ts","../../src/utils/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/utils/bigint.ts","../../src/nonce-account.ts","../../src/programs/system.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../node_modules/fast-stable-stringify/index.js","../../src/epoch-schedule.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/programs/address-lookup-table/state.ts","../../src/account-data.ts","../../src/utils/makeWebsocketUrl.ts","../../src/connection.ts","../../src/keypair.ts","../../src/programs/address-lookup-table/index.ts","../../src/programs/compute-budget.ts","../../src/programs/ed25519.ts","../../src/utils/secp256k1.ts","../../src/programs/secp256k1.ts","../../src/programs/stake.ts","../../src/programs/vote.ts","../../src/validator-info.ts","../../src/vote-account.ts"],"names":["Object","defineProperty","exports","value","randomBytes","wrapConstructorWithOpts","wrapConstructor","checkOpts","Hash","concatBytes","toBytes","utf8ToBytes","asyncLoop","nextTick","hexToBytes","bytesToHex","isLE","rotr","createView","u32","u8","crypto_1","require","arr","Uint8Array","buffer","byteOffset","byteLength","Uint32Array","Math","floor","DataView","word","shift","Error","hexes","Array","from","length","v","i","toString","padStart","uint8a","hex","TypeError","array","j","hexByte","slice","byte","Number","parseInt","isNaN","iters","tick","cb","ts","Date","now","diff","str","TextEncoder","encode","data","arrays","every","a","reduce","result","pad","set","this","_cloneInto","defaults","opts","undefined","obj","prototype","call","constructor","assign","hashConstructor","hashC","message","update","digest","tmp","outputLen","blockLen","create","hashCons","msg","bytesLength","crypto","web","getRandomValues","node","basex","module","checkUint8Array","b","uint8ArrayToBuffer","buffer_1","Layout","span","property","isInteger","offset","RangeError","rv","values","nameWithProperty","name","lo","Class","layout","hasOwnProperty","layout_","boundConstructor_","makeDestinationObject","writable","decode","ExternalLayout","GreedyCount","elementSpan","rem","src","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","isCount","idx","getSpan","push","elo","Structure","fields","decodePrefixes","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","union","fromArray","fixBitwiseResult","BitStructure","msb","_packedSetValue","_packedGetValue","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","srcBuffer","write","CString","String","srcb","copy","UTF8","maxSpan","Constant","createChainIdMiddleware","chainId","req","res","next","end","method","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","_ref","getAccounts","createAsyncMiddleware","request","response","_context","accounts","_ref3","requestAccounts","_context2","targetMethod","handler","_context3","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createRequestAccountsMiddleware","createGetAccountsMiddleware","createGenericJRPCMiddleware","BaseInjectedProvider","_inherits","config","state","_classCallCheck","_super","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","_createClass","key","_","Promise","resolve","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","_lookupNetwork","BaseProvider","getBaseProviderHandlers","_requestAccounts","publicKey","bs58","_getAccounts","_getPrivateKey","ethErrors","rpc","methodNotSupported","_getSecretKey","_context5","params","transaction","_context6","display","sigData","signature","_req$params","_req$params2","_context7","invalidParams","_context8","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","connect","_yield$injectedProvid","_yield$injectedProvid2","txMessage","invalidRequest","serializeMessage","_yield$injectedProvid3","PublicKey","addSignature","custom","code","_yield$injectedProvid4","conn","Connection","sendRawTransaction","serialize","allTxns","unsignedTx","_yield$injectedProvid5","signatures","getSlopeHandlers","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","sign","getSolletHandlers","getTorusHandlers","_req$params3","sendTransaction","_req$params4","_req$params5","transactions","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","rpcConnectionError","emit","_context4","on","_this","configure","_objectSpread","setupProvider","_getProviderHandlers","privKey","keyPairGenerator","Keypair","fromSecretKey","Buffer","_context9","keyPair","toBase58","secretKey","partialSign","signedMsg","nacl","detached","_providerEngineProxy","sig","txns","_req$params6","_iterator","tx","SolanaPrivateKeyProvider","_enable","privateKey","_createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","_ref6","addNewChainConfig","switchSolanaChain","createChainSwitchMiddleware","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchChain","_ref7","updatePrivatekey","createAccountMiddleware","_this2","updateAccount","providerFactory","SolanaWallet","_defineProperty","_yield$this$provider$","signedTransaction","signedTransactions","args","EthereumRpcError","serialized","stack","fast_safe_stringify_1","stringifyReplacer","EthereumProviderError","isValidEthProviderCode","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","limitExceeded","parse","methodNotFound","internal","userRejectedRequest","unauthorized","unsupportedMethod","disconnected","chainDisconnected","standard","number","n","isSafeInteger","bool","bytes","lengths","includes","hash","exists","instance","checkFinished","destroyed","finished","output","out","min","assert","default","__createBinding","o","m","k","k2","enumerable","get","__setModuleDefault","__decorate","decorators","target","desc","d","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","__importDefault","deserializeUnchecked","deserialize","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","textDecoder","TextDecoder","fatal","fieldPath","originalMessage","fieldName","splice","join","buf","alloc","concat","maybeResize","writeUInt8","writeUInt16LE","writeBuffer","toArray","subarray","writeU32","fn","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","apply","indexOf","readUInt8","readUInt16LE","readBuffer","len","readU32","capitalizeFirstLetter","string","charAt","toUpperCase","serializeField","schema","fieldType","writer","writeFixedArray","writeArray","item","kind","writeU8","type","size","forEach","val","serializeStruct","error","addToFieldPath","borshSerialize","structSchema","map","field","deserializeField","reader","readFixedArray","readArray","readU8","Map","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","toBigIntLE","reversed","reverse","BigInt","toBigIntBE","toBufferLE","num","width","toBufferBE","_interopRequireDefault","Client","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","_CommonClient","address","_ref$autoconnect","autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","max_reconnects","generate_request_id","uuid","v4","generateRequest","ClientBrowser","callServer","options","reviver","replacer","generator","version","notificationIdNull","id","callback","self","isBatch","hasCallback","err","JSON","stringify","_parseResponse","responseText","isError","filter","FALLBACK_ERROR_CODE","error_constants_1","FALLBACK_MESSAGE","FALLBACK_ERROR","getMessageFromCode","fallbackMessage","codeString","hasKey","isJsonRpcServerError","isValidCode","assignOriginalError","fallbackError","shouldIncludeStack","classes_1","_error","originalError","SHA2","_assert_js_1","utils_js_1","padOffset","pos","view","take","process","dataView","roundClean","fill","setBigUint64","_32n","_u32_max","wh","wl","h","l","setUint32","oview","digestInto","destroy","to","add","toBig","fromBig","U32_MASK64","le","lst","Ah","Al","Bh","Bl","u64","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","toFailures","StructError","failure","failures","cached","rest","path","isObject","x","print","shiftIterator","input","done","toFailure","context","struct","branch","refinement","Symbol","iterator","run","coerce","mask","ctx","coercer","valid","validator","entries","t","Set","refiner","Struct","props","is","validate","tuples","tuple","define","any","Element","boolean","literal","constant","description","never","nullable","optional","record","Key","Value","Elements","Never","max","keys","Structs","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","unknown","condition","_Buffer","ALPHABET","BASE_MAP","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","isBuffer","pbegin","pend","b58","it1","it2","repeat","inRange","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","unshift","pop","decoderError","opt_code_point","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","ArrayBuffer","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","u","stringToCodePoints","WebSocketBrowserImpl","_EventEmitter","protocols","socket","window","WebSocket","onopen","onmessage","event","onerror","onclose","reason","optionsOrCallback","send","close","listener","addEventListener","EventEmitter","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","p","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","timeout","ws_opts","reject","jsonrpc","promise","setTimeout","_login","mark","_callee","resp","wrap","prev","sent","abrupt","stop","_x","_listMethods","_callee2","_this3","_subscribe","_callee3","_x2","_unsubscribe","_callee4","_x3","_this4","notification","listeners","then","clearTimeout","_ref2","utils_1","errors_1","getEthJsonRpcError","arg","parseOpts","getEthProviderError","server","sha384","sha512_256","sha512","SHA512","_sha2_js_1","_u64_js_1","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_256","SHA384","sha256","Maj","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","W15","W2","s0","s1","T1","T2","shake256","shake128","keccak_512","keccak_384","keccak_256","keccak_224","sha3_512","sha3_384","sha3_256","sha3_224","Keccak","keccakP","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","y","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","suffix","enableXOF","posOut","state32","keccak","finish","bufferOut","writeInto","xofInto","gen","genShake","dkLen","hmac","HMAC","_key","iHash","oHash","getPrototypeOf","CU_O","CURVE","freeze","P","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","z","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","x1y1","X3","Y3","T3","double","negate","W","windows","points","base","affinePoint","equals","Point","_WINDOW_SIZE","precomputes","pointPrecomputes","precomputeWindow","normalizeZ","ZERO","f","windowSize","maxNumber","shiftBy","wbits","pr","abs","scalar","wNAF","normalizeScalar","P0","multiplyUnsafe","invZ","invert","ax","ay","zz","legacyRist","toInv","nums","lastMultiplied","inverted","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","assertRstPoint","RistrettoPoint","ep","u1","u2","u2sq","invsqrt","invertSqrt","D1","D2","zInv","edIsNegative","_y","numberTo32BytesLE","toRawBytes","toHex","one","two","subtract","multiply","r0","Ns","uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W3","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","u1_2","u2_2","I","Dx","Dy","WeakMap","delete","isTorsionFree","strict","normed","bytesToNumberLE","y2","isXOdd","isLastByteOdd","getExtendedPublicKey","point","Signature","assertValidity","fromHex","numberTo32BytesBE","_sha512Sync","MAX_255B","modulo","q","gcd","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","adjustBytes25519","checkPrivateKey","getKeyFromHash","hashed","head","prefix","pointBytes","sha512s","utils","getExtendedPublicKeySync","prepareVerification","SB","pub","finishVerification","kA","sync","getPublicKey","verify","_setWindowSize","nodeCrypto","TORSION_SUBGROUP","hashToPrivateScalar","randomPrivateKey","subtle","createHash","precompute","sha512Sync","defineProperties","configurable","_3n","_8n","beta","weistrass","x2","x3","USE_ENDOMORPHISM","ShaError","JacobianPoint","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","splitScalarEndo","k1neg","k1","k2neg","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","scratch","isCompressed","numTo32bStr","hasEvenY","isValidFieldElement","left","Q","aP","bQ","isShort","bytesToNumber","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","recovery","truncateHash","normalizeSignature","rinv","multiplyAndAddUnsafe","sliceDER","parseDERInt","isWithinCurveOrder","HALF","hasHighS","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toDERRawBytes","toCompactHex","hexToNumber","rBytesLeft","parseDERSignature","fromDER","numTo32b","_sha256Sync","_hmacSha256Sync","divNearest","ENDO","a1","a2","POW_2_128","c1","c2","delta","HmacDrbg","counter","hmacSha256","seed","checkSync","hmacSync","incr","kmdToSig","kBytes","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","canonical","der","recovered","normalizeS","toCompactRawBytes","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","messages","importKey","ckey","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","taggedHashSync","ed25519","generateKeypair","privateScalar","isOnCurve","toBuffer","properties","SOLANA_SCHEMA","uniquePublicKeyCounter","_bn","isPublicKeyData","decoded","BN","eq","toJSON","toArrayLike","zeroPad","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","nonce","seedsWithNonce","findProgramAddressSync","pubkeyData","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","encodeLength","rem_len","TransactionStatus","CompiledKeys","payer","keyMetaMap","getMessageComponents","mapEntries","writableSigners","isSigner","isWritable","readonlySigners","writableNonSigners","readonlyNonSigners","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","extractTableLookup","lookupTable","drainKeysFoundInLookupTable","addresses","keyMeta","isInvoked","writableIndexes","drainedWritableKeys","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","getOrInsertDefault","payerKeyMeta","ix","accountMeta","Message","accountKeys","recentBlockhash","indexToProgramIds","account","getAccountKeys","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","signData","compile","payerKey","byteArray","accountCount","dataSlice","MessageV0","compiledInstructions","addressTableLookups","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","compiledKeys","lookupTableAccounts","extractResult","addressTableLookup","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","signedKeys","unsignedKeys","invariant","_compile","pair","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","_addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","confirmTransaction","status","sleep","ms","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","encodeDecode","bigIntLayout","bigInt","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","bytesLengthPadding","_rpcEndpoint","all","PACKET_DATA_SIZE","objToString","objKeys","returnVal","isArrayProp","propVal","toStr","isFinite","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","globalThis","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedConfig","createRpcResult","pick","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetParsedBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","endpoint","wsEndpoint","httpHeaders","disableRetryOnRateLimit","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","url","customFetch","fetchWithMiddleware","fetchImpl","info","init","modifiedInfo","modifiedInit","modifiedFetchArgs","RpcClient","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","Infinity","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","configWithoutEncoding","strategy","rawSignature","decodedSignature","subscriptionCommitment","confirmationPromise","subscriptionId","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","timeoutId","TIMED_OUT","checkBlockHeight","getBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","race","outcome","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","extra","block","endSlot","transactionDetails","getFirstAvailableBlock","firstAvailableBlock","getConfirmedBlockSignatures","until","getSlot","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","fromAccountData","getNonceAndContext","disableCache","timeSinceFetch","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","logTrace","signersOrOptions","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","recentSlot","lookupTableAddress","bumpSeed","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","createInstructionWithPublicKey","secp256k1","msgs","ecdsaSign","drbg","reseedSync","generateSync","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","recoveryId","Secp256k1Program","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","lockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername"],"mappings":"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","file":"static/js/4.bbd08ef8.chunk.js","sourcesContent":["\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512 = exports.SHA512 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass SHA512 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using acounter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n        source: optional(\n          union([literal('transaction'), literal('lookupTable')]),\n        ),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta, version}) => ({\n        meta,\n        transaction: {\n          ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message),\n        },\n        version,\n      })),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetParsedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    return res.result;\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n"],"sourceRoot":""}