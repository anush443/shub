{"version":3,"sources":["../node_modules/fast-deep-equal/index.js","../node_modules/is-stream/index.js","../../src/classes.ts","../../src/error-constants.ts","../../src/baseSolanaAdapter.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js","../node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js","../../src/utils.ts","../../../src/messages.ts","../../../src/interfaces.ts","../../../src/config.ts","../../../src/loglevel.ts","../../../src/utils.ts","../../../src/baseProvider.ts","../../../src/embedUtils.ts","../../../src/PopupHandler.ts","../../../src/communicationProvider.ts","../../../src/inPageProvider.ts","../../../src/siteMetadata.ts","../../../src/embed.ts","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/layout.ts","../../src/util/bigint.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/sysvar.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/transaction.ts","../../src/transaction-constants.ts","../../src/util/assert.ts","../../src/system-program.ts","../../src/address-lookup-table-program.ts","../../src/bpf-loader-deprecated.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../src/compute-budget.ts","../../node_modules/fast-stable-stringify/index.js","../../src/util/url-impl.ts","../../src/errors.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/epoch-schedule.ts","../../src/util/tx-expiry-custom-errors.ts","../../src/connection.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../../src/index.ts","../../src/solanaWalletAdapter.ts"],"names":["module","exports","equal","a","b","constructor","length","i","keys","Array","isArray","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","isStream","stream","pipe","writable","_write","_writableState","readable","_read","_readableState","duplex","transform","_transform","EthereumRpcError","code","message","data","Number","isInteger","Error","undefined","serialized","stack","fast_safe_stringify_1","serialize","stringifyReplacer","EthereumProviderError","isValidEthProviderCode","_","value","rpc","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","parse","invalidRequest","methodNotFound","invalidParams","internal","provider","userRejectedRequest","unauthorized","unsupportedMethod","disconnected","chainDisconnected","standard","BaseSolanaAdapter","_inherits","params","_classCallCheck","_this","_defineProperty","clientId","_createClass","_authenticateUser","chainConfig","_this$chainConfig","chainId","_context","WalletLoginError","notConnectedError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","CONNECTED","request","method","accounts","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","slice","issuedAt","Date","toISOString","signChallenge","challenge","encodedMessage","TextEncoder","encode","display","signedMessage","verifySignedChallenge","bs58","sessionTime","saveToken","_disconnect","_context2","disconnectionError","clearToken","BaseAdapter","basex","require","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","psz","zeroes","size","b256","carry","it3","it4","vch","ArrayBuffer","isView","buffer","byteOffset","byteLength","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","FALLBACK_ERROR_CODE","error_constants_1","FALLBACK_MESSAGE","FALLBACK_ERROR","getMessageFromCode","fallbackMessage","codeString","hasKey","isJsonRpcServerError","isValidCode","assignOriginalError","error","assign","obj","fallbackError","shouldIncludeStack","classes_1","_error","originalError","permanentlyDisconnected","unsupportedSync","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","TORUS_BUILD_ENV","BUTTON_POSITION","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","hostname","loglevel","getLogger","getWindowId","getTorusUrl","buildEnv","torusUrl","logLevel","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","_ref","w","h","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","left","abs","top","BaseProvider","connectionStream","jsonRpcStreamName","isDuplexStream","messages","isTorus","setMaxListeners","_handleConnect","bind","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","sendAsync","mux","ObjectMultiplex","pump","ignoreStream","jsonRpcConnection","createStreamMiddleware","createStream","rpcEngine","JRPCEngine","push","createIdRemapMiddleware","req","res","next","ethErrors","done","createLoggerMiddleware","middleware","_rpcEngine","jsonRpcConnectionEvents","events","args","Promise","resolve","reject","getRpcPromiseCallback","send","callback","streamName","remoteLabel","emitter","warningMsg","warn","listenerCount","emit","logStreamDisconnectWarning","SafeEventEmitter","handleEvent","handle","eventName","handler","handlerArgs","handlerWrapper","removeEventListener","addEventListener","documentReady","readyState","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","PopupHandler","url","target","features","windowTimer","iClosedWindow","_setupTimer","setInterval","closed","clearInterval","open","_this$window","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","_state","_defaultState","dappStorageKey","languageTranslations","configuration","userLanguage","navigator","language","userLanguages","split","config","getUserLanguage","embedTranslations","windowRefs","on","isConnected","COMMUNICATION_NOTIFICATIONS","IFRAME_STATUS","isFullScreen","rid","_displayIframe","isFull","CREATE_WINDOW","windowId","_createPopupBlockAlert","CLOSE_WINDOW","_handleCloseWindow","USER_LOGGED_IN","currentLoginProvider","isLoggedIn","USER_LOGGED_OUT","isIFrameFullScreen","torusAlertContainer","torusIframe","COMMUNICATION_JRPC_METHODS","GET_PROVIDER_STATE","info","initialized","_handleWindow","arguments","finalUrl","URL","hash","handledWindow","OPENED_WINDOW","once","CLOSED_WINDOW","style","right","bottom","torusWidgetVisibility","buttonPosition","hideTorusButton","showTorusButton","cb","_payload","jsonrpc","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","PROVIDER_NOTIFICATIONS","ACCOUNTS_CHANGED","UNLOCK_STATE_CHANGED","CHAIN_CHANGED","PROVIDER_JRPC_METHODS","isUnlocked","isInternal","err","result","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","e","getSiteName","siteName","querySelector","metaTitle","title","getSiteIcon","icon","querySelectorAll","find","_icon","Boolean","getSiteMetadata","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","SET_PROVIDER","isLocalStorageAvailable","type","storage","setItem","removeItem","storageAvailable","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","whiteLabel","enableLogging","network","useLocalStorage","apiKey","extraParams","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","handleSetup","body","dappMetadata","contentWindow","postMessage","_setupWeb3","topupHide","isTopupHidden","torus","loginProvider","login_hint","loginParams","userInfo","privateKey","success","LOGOUT","logout","clearInit","isElement","element","Element","Document","contains","path","WALLET_INSTANCE_ID","instanceId","finalPath","searchParams","forEach","USER_INFO","userInfoResponse","TOPUP","topupResponse","response","transaction","requireAllSignatures","options","signature","serializeMessage","messageOnly","parsed","JSON","publicKey","PublicKey","Buffer","addSignature","transactions","map","tx","responses","signatures","item","idx","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","BasePostMessageStream","targetWindow","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","login","then","catch","apply","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","all","toBuffer","arr","isBuffer","minimalisticAssert","assert","val","msg","l","r","create","inherits_browserModule","ctor","superCtor","super_","enumerable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","htonl","zero2","word","zero8","utils","enc","p","c","endian","start","end","len","k","d","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","eh","el","num","BlockHash","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","y","z","maj32","p32","s","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","sha","require$$4","sum32_3","RIPEMD160","K","Kh","ripemd","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","Hash","inner","outer","_init","hmac","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","warning","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","form","normalize","join","String","fromCharCode","_checkNormalize","HEX","Logger","defineProperty","level","toLowerCase","throwArgumentError","console","_log","levels","DEBUG","INFO","WARNING","makeError","errors","UNKNOWN_ERROR","messageDetails","hex","stringify","reason","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","kind","censorship","permanent","globalLogger","logger","addSlice","array","arrayify","checkSafeUint53","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","Struct","properties","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Map","_bn","isPublicKeyData","decoded","BN","equals","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","alloc","copy","fromPublicKey","seed","programId","seeds","publicKeyBytes","is_on_curve","createProgramAddressSync","seedsWithNonce","findProgramAddressSync","pubkeyData","default","set","fields","naclLowLevel","nacl","lowlevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","property","BufferLayout","rustString","rsl","_decode","_encode","rslShim","offset","chars","span","getAlloc","layout","getItemAlloc","field","elementLayout","u64","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","encodeData","allocLength","Layout","layoutFields","instruction","index","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","decodeLength","elem","shift","encodeLength","rem_len","TransactionStatus","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","ix","programIdIndex","isAccountSigner","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","signData","byteArray","accountCount","dataSlice","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","pubkey","isSigner","isWritable","Transaction","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","blockhash","nonceInstruction","signers","add","items","compileMessage","accountMetas","accountMeta","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","splice","payerMeta","signedKeys","unsignedKeys","compiledInstructions","indexOf","meta","invariant","keyIndex","_compile","every","pair","connection","getFeeForMessage","setSigners","seen","Set","sign","uniqueSigners","signer","_partialSign","partialSign","detached","secretKey","_addSignature","sigpair","verifySignatures","_verifySignatures","verify","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","BigInt","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","authorizedPubkey","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","authority","recentSlot","lookupTableAddress","bumpSeed","payer","lookupTable","addresses","addr","recipient","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","confirmTransaction","sleep","ms","setTimeout","Loader","ceil","chunkSize","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","bytesLength","bytesLengthPadding","_rpcEndpoint","PACKET_DATA_SIZE","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","globalThis","fetch","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","PublicKeyFromString","coerce","instance","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","createRpcResult","union","pick","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","slot","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","nullable","epoch","effectiveSlot","amount","postBalance","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","logs","rentEpoch","unitsConsumed","returnData","byIdentity","range","firstSlot","lastSlot","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","state","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","root","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","readonly","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","ParsedConfirmedTransactionMetaResult","PerfSampleResult","previousBlockhash","parentSlot","rewards","rewardType","feeCalculator","lamportsPerSignature","numTransactions","numSlots","samplePeriodSecs","LogsResult","Keypair","process","keypair","_keypair","keyPair","fromSecretKey","skipValidation","fromSeed","ED25519_INSTRUCTION_LAYOUT","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","createInstructionWithPublicKey","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","lockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","publicKeyCreate","secp256k1","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","sha3","keccak_256","recoveryId","Secp256k1Program","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","website","details","keybaseUsername","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","get","utils_1","errors_1","getEthJsonRpcError","arg","parseOpts","getEthProviderError","server","custom","SolanaWalletAdapter","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","NOT_READY","torusWalletOptions","adapterSettings","loginSettings","solanaProvider","_get","blockExplorer","displayName","rpcTarget","ticker","tickerName","blockExplorerUrl","logo","getChainConfig","torusInstance","init","TorusInjectedProvider","READY","ADAPTER_EVENTS","autoConnect","rehydrated","connect","ERRORED","_connect","WalletInitializationError","notReady","CONNECTING","adapter","torusInpageProvider","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","_this$chainConfig3","setProvider","reconnected","connectionError","_args3","cleanup","_context3","DISCONNECTED","_getUserInfo","_context4","getUserInfo"],"mappings":"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","file":"static/js/14.bd46972e.chunk.js","sourcesContent":["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n",null,null,null,"const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n",null,null,null,null,null,null,null,null,null,null,null,null,null,"import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport * as bigintLayout from './util/bigint';\nimport {SystemProgram} from './system-program';\nimport {TransactionInstruction} from './transaction';\nimport {decodeData, encodeData, IInstructionInputData} from './instruction';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export const URL = globalThis.URL;\nexport const URLSearchParams = globalThis.URLSearchParams;\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {URL} from './util/url-impl';\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: new Message(result.transaction.message),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","export * from './account';\nexport * from './address-lookup-table-program';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/tx-expiry-custom-errors';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n",null],"sourceRoot":""}